---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: query-ingresses-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: query-ingresses-role
rules:
  - apiGroups:
      - listeners.stackable.tech
    resources:
      - listeners
      - podlisteners
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: query-ingresses-rolebinding
subjects:
  - kind: ServiceAccount
    name: query-ingresses-sa
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: query-ingresses-role
---
apiVersion: batch/v1
kind: Job
metadata:
  name: query-ingresses
spec:
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: query-ingresses-sa
      containers:
        - name: query-ingresses
          image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable0.0.0-dev
# NOTE: Hostname resolution does not work on our OKD clusters, so the command for testing the Hostname is omitted on Openshift. It would be better to omit this entire test value for Openshift but this is not (yet) possible in beku.
{% if test_scenario['values']['openshift'] == 'true' and test_scenario['values']['addressType'] != "Hostname" %}
          command:
            - bash
            - -euo
            - pipefail
            - -c
            - |
              echo Testing access via Listener.status
              for pod in nginx-long-name-approaching-k8s-limits-{0,1}; do \
                ADDR=$(kubectl get listener/listener-$pod \
                  -o jsonpath='http://{.status.ingressAddresses[0].address}:{.status.ingressAddresses[0].ports.http}/pod-name');
                echo Requesting $ADDR should return $pod;
                curl -s $ADDR | grep $pod;
              done

              echo Testing access via PodListeners
              for pod in nginx-long-name-approaching-k8s-limits-{0,1}; do
                POD_UID=$(kubectl get pod/$pod -o jsonpath='{.metadata.uid}')
                ADDR=$(kubectl get podlisteners/pod-$POD_UID \
                  -o jsonpath='http://{.spec.listeners.listener.ingressAddresses[0].address}:{.spec.listeners.listener.ingressAddresses[0].ports.http}/pod-name');
                echo Requesting $ADDR should return $pod;
                curl -s $ADDR | grep $pod;
              done
{% endif %}
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 200m
              memory: 128Mi

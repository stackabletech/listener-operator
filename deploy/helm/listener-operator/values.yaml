# Default values for listener-operator.
---
image:
  repository: docker.stackable.tech/stackable/listener-operator
  pullPolicy: IfNotPresent
csiProvisioner:
  image:
    repository: docker.stackable.tech/k8s/sig-storage/csi-provisioner
    tag: v3.1.0
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
csiNodeDriverRegistrar:
  image:
    repository: docker.stackable.tech/k8s/sig-storage/csi-node-driver-registrar
    tag: v2.5.0
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  # listener-operator requires root permissions
  runAsUser: 0
  seLinuxOptions:
    # Run as "Super Privileged Container" to be allowed to write into
    # the Listener volumes
    type: spc_t
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

controller:
  resources:
    # Resource requests and limits for the controller pod
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

node:
  driver:
    resources:
      # Resource requests and limits for the per node driver container
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Kubelet dir may vary in environments such as microk8s, see https://github.com/stackabletech/secret-operator/issues/229
kubeletDir: /var/lib/kubelet

# Options: none, vanilla, premium
# none: No ListenerClasses are preinstalled, the administrator must supply them themself
# pets: ListenerClasses are preinstalled that are suitable for on-prem/"pet" environments, assuming long-running Nodes but not requiring a LoadBalancer controller
# cattle: ListenerClasses are preinstalled that are suitable for cloud/"cattle" environments, requiring a LoadBalancer controller but tolerating short-lived Nodes
preset: pets
